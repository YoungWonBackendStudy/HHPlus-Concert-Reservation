spring.application.name: concert-reservation

spring.profiles.group:
  "local": "local-infra,test-db"
  "test":  "docker-infra,test-db"
  "query-test": "docker-infra,query-test-db"
  "local-docker": "docker-infra,test-db"

# Redis Config
spring.data.redis:
  default-cache-ttl: 10
  keyspace:
    waiting-token: "waitingQueueToken"
    active-token: "activeToken"
    reservation: "reservation"

# Async Config
spring.async.execution.pool:
  core-size: 4
  max-size: 20
  queue-capacity: 500

# Kafka Consumer/Producer Config
spring.kafka:
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

---
spring.config.activate.on-profile: local-infra

spring.data.redis:
  host: host.docker.internal
  port: 6379

spring.kafka.bootstrap-servers:  host.docker.internal:9092

---
spring.config.activate.on-profile: docker-infra

spring.data.redis:
  host: host.docker.internal
  port: 6379

spring.kafka.bootstrap-servers: host.docker.internal:9092
spring.kafka.consumer:
  client-id: consumer-concert-reservation-1
---
spring.config.activate.on-profile: test-db

spring:
  datasource:
    driver-class-name: org.h2.Driver
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
  sql:
    init:
      mode: always
      data-locations: classpath:data.sql
---
spring.config.activate.on-profile: query-test-db

spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    username: root
    password: 1234
    url: jdbc:mariadb://host.docker.internal:3306/hpp_concert?characterEncoding=utf8